// APP START
// ****************************
// /www/app/assets/app.js is autogenerated. Do not modify.
// Changes should be made in /master/modules/js or /master/components/<component-name>/js
// ****************************
// -----------------------------------

var app = angular.module('krakenApp', ['ngRoute','ngMaterial',
  'pods', 'replicationControllers', 'services']);

app.config(['$routeProvider', function ($routeProvider) {
  $routeProvider
    .when("/", {templateUrl: "/views/partials/home.html", controller: "PageCtrl"})
    .when("/clusters", {templateUrl: "/pages/clusters.html", controller: "PageCtrl"})
    .when("/pods", {templateUrl: "/pages/pods.html", controller: "PageCtrl"})
    .when("/replication", {templateUrl: "/pages/replication.html", controller: "PageCtrl"})
    .when("/services", {templateUrl: "/pages/services.html", controller: "PageCtrl"})
    .when("/labels", {templateUrl: "/pages/labels.html", controller: "PageCtrl"})
    .when("/404", {templateUrl: "/views/partials/404.html", controller: "PageCtrl"})
    // else 404
    .otherwise({
        redirectTo: "/404"
    });
}]);

app.controller('PageCtrl', ['$scope', '$mdSidenav', function($scope, $mdSidenav){
  console.log("loading page controller.");
  $scope.toggleSidenav = function(menuId) {
    $mdSidenav(menuId).toggle();
  };

}]);

// app.run(['$route', function($route)  {
//   $route.reload();
// }]);

app.run(['$route', angular.noop]);

app.directive('includeReplace', function () {
    return {
        require: 'ngInclude',
        restrict: 'A', /* optional */
        link: function (scope, el, attrs) {
            el.replaceWith(el.children());
        }
    };
});
/**=========================================================
 * Module: config.js
 * App routes and resources configuration
 =========================================================*/
/**=========================================================
 * Module: constants.js
 * Define constants to inject across the application
 =========================================================*/
/**=========================================================
 * Module: home-page.js
 * Page Controller
 =========================================================*/

app.controller('PageCtrl', ['$scope', '$mdSidenav', '$timeout', function($scope, $mdSidenav, $timeout){

  // *********************
  // Internal methods
  // *********************

  var t = false;

  $scope.shouldLockOpen = function() {
    console.log(t);
    return t;
  }

  $scope.openMenu = function() {
    $timeout(function() {
      t = !$mdSidenav('left').isOpen();
      $mdSidenav('left').toggle();
    });
  }
 
}]);
/**=========================================================
 * Module: main.js
 * Main Application Controller
 =========================================================*/
/**=========================================================
 * Module: tabs-global.js
 * Page Controller
 =========================================================*/

angular.module('whiteframeBasicUsage', ['ngMaterial']);

app.controller('AppCtrl', ["$scope", function( $scope ) {
    $scope.data = {
      selectedIndex : 0,
      secondLocked : true,
      firstLabel : "Dashboard",
      secondLabel : "Graph",
      thirdLabel : "Other"
    };
    $scope.next = function() {
      $scope.data.selectedIndex = Math.min($scope.data.selectedIndex + 1, 2) ;
    };
    $scope.previous = function() {
      $scope.data.selectedIndex = Math.max($scope.data.selectedIndex - 1, 0);
    };
  }]);
/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/
/**=========================================================
 * Module: toggle-state.js
 * Services to share toggle state functionality
 =========================================================*/
/**=========================================================
 * Module: Clusters
 * Visualizer for clusters
 =========================================================*/

app.controller('ClusterCtrl', ['$scope', '$interval',
    function($scope, $interval) {
      $scope.mode = 'query';
      $scope.determinateValue = 30;
      $interval(function() {
        $scope.determinateValue += 1;
        if ($scope.determinateValue > 100) {
          $scope.determinateValue = 30;
        }
      }, 100, 0, true);
    }
  ]);

/**=========================================================
 * Module: Labels
 * Visualizer for labels
 =========================================================*/

app.controller('LabelCtrl', ['$scope', '$interval',
    function($scope, $interval) {
      $scope.mode = 'query';
      $scope.determinateValue = 30;
      $interval(function() {
        $scope.determinateValue += 1;
        if ($scope.determinateValue > 100) {
          $scope.determinateValue = 30;
        }
      }, 100, 0, true);
    }
  ]);
/**=========================================================
 * Module: Pods
 * Visualizer for pods
 =========================================================*/

app.controller('PodCtrl', ['$scope', '$interval', 'podService',
    function($scope, $interval, podService) {
      $scope.mode = 'query';
      $scope.determinateValue = 30;
      $interval(function() {
        $scope.determinateValue += 1;
        if ($scope.determinateValue > 100) {
          $scope.determinateValue = 30;
        }
      }, 100, 0, true);

      var allPods = { };

      loadPods();

      function loadPods() {
        podService
          .loadAll()
          .then( function( pods ) {
            allPods = pods;

            $scope.pods = pods;
            $scope.selected = pods.items[0];
          });
      }
    }
  ]);
/**=========================================================
 * Module: Replication
 * Visualizer for replication controllers
 =========================================================*/

app.controller('ReplicationCtrl', ['$scope', '$interval', 'replicationControllerService',
    function($scope, $interval) {
      $scope.mode = 'query';
      $scope.determinateValue = 30;
      $interval(function() {
        $scope.determinateValue += 1;
        if ($scope.determinateValue > 100) {
          $scope.determinateValue = 30;
        }
      }, 100, 0, true);
    }
  ]);

/**=========================================================
 * Module: Services
 * Visualizer for services
 =========================================================*/

app.controller('ServicesCtrl', ['$scope', '$interval', 'serviceService',
    function($scope, $interval) {
      $scope.mode = 'query';
      $scope.determinateValue = 30;
      $interval(function() {
        $scope.determinateValue += 1;
        if ($scope.determinateValue > 100) {
          $scope.determinateValue = 30;
        }
      }, 100, 0, true);
    }
  ]);

(function(){
  'use strict';

  angular.module('pods', [ ])
         .service('podService', PodDataService);

  /**
   * Pod DataService
   * Mock async data service.
   *
   * @returns {{loadAll: Function}}
   * @constructor
   */
  function PodDataService($q){
    var pods = {
      "kind": "PodList",
      "creationTimestamp": null,
      "selfLink": "/api/v1beta1/pods",
      "resourceVersion": 166552,
      "apiVersion": "v1beta1",
      "items": [
        {
          "id": "hello",
          "uid": "0fe3644e-ab53-11e4-8ae8-061695c59fcf",
          "creationTimestamp": "2015-02-03T03:16:36Z",
          "selfLink": "/api/v1beta1/pods/hello?namespace=default",
          "resourceVersion": 466,
          "namespace": "default",
          "labels": {
            "environment": "testing",
            "name": "hello"
          },
          "desiredState": {
            "manifest": {
              "version": "v1beta2",
              "id": "",
              "volumes": null,
              "containers": [
                {
                  "name": "hello",
                  "image": "quay.io/kelseyhightower/hello",
                  "ports": [
                    {
                      "hostPort": 80,
                      "containerPort": 80,
                      "protocol": "TCP"
                    }
                  ],
                  "imagePullPolicy": "PullIfNotPresent"
                }
              ],
              "restartPolicy": {
                "always": {}
              },
              "dnsPolicy": "ClusterFirst"
            }
          },
          "currentState": {
            "manifest": {
              "version": "",
              "id": "",
              "volumes": null,
              "containers": null,
              "restartPolicy": {}
            },
            "status": "Running",
            "host": "172.31.12.204",
            "podIP": "10.244.73.2",
            "info": {
              "hello": {
                "state": {
                  "running": {
                    "startedAt": "2015-02-03T03:16:51Z"
                  }
                },
                "restartCount": 0,
                "image": "quay.io/kelseyhightower/hello",
                "containerID": "docker://96ade8ff30a44c4489969eaf343a7899317671b07a9766ecd0963e9b41501256"
              },
              "net": {
                "state": {
                  "running": {
                    "startedAt": "2015-02-03T03:16:41Z"
                  }
                },
                "restartCount": 0,
                "podIP": "10.244.73.2",
                "image": "kubernetes/pause:latest",
                "containerID": "docker://93d32603cafbff7165dadb1d4527899c24246bca2f5e6770b8297fd3721b272c"
              }
            }
          }
        }
      ]
    };

    // Uses promises
    return {
      loadAll : function() {
        // Simulate async call
        return $q.when(pods);
      }
    };
  }
  PodDataService.$inject = ["$q"];

})();

(function(){
  'use strict';

  angular.module('replicationControllers', [ ])
         .service('replicationControllerService', ReplicationControllerDataService);

  /**
   * Replication Controller DataService
   * Mock async data service.
   *
   * @returns {{loadAll: Function}}
   * @constructor
   */
  function ReplicationControllerDataService($q){
    var replicationControllers = {
      "kind": "ReplicationControllerList",
      "creationTimestamp": null,
      "selfLink": "/api/v1beta1/replicationControllers",
      "resourceVersion": 166552,
      "apiVersion": "v1beta1",
      "items": []
    };

    // Uses promises
    return {
      loadAll : function() {
        // Simulate async call
        return $q.when(replicationControllers);
      }
    };
  }
  ReplicationControllerDataService.$inject = ["$q"];

})();

(function(){
  'use strict';

  angular.module('services', [ ])
         .service('serviceService', ServiceDataService);

  /**
   * Service DataService
   * Mock async data service.
   *
   * @returns {{loadAll: Function}}
   * @constructor
   */
  function ServiceDataService($q){
    var services = {
      "kind": "ServiceList",
      "creationTimestamp": null,
      "selfLink": "/api/v1beta1/services",
      "resourceVersion": 166552,
      "apiVersion": "v1beta1",
      "items": [
        {
          "id": "kubernetes",
          "uid": "626dd08d-ab51-11e4-8ae8-061695c59fcf",
          "creationTimestamp": "2015-02-03T03:04:36Z",
          "selfLink": "/api/v1beta1/services/kubernetes?namespace=default",
          "resourceVersion": 11,
          "namespace": "default",
          "port": 443,
          "protocol": "TCP",
          "labels": {
            "component": "apiserver",
            "provider": "kubernetes"
          },
          "selector": null,
          "containerPort": 0,
          "portalIP": "10.244.66.215",
          "sessionAffinity": "None"
        },
        {
          "id": "kubernetes-ro",
          "uid": "626f9584-ab51-11e4-8ae8-061695c59fcf",
          "creationTimestamp": "2015-02-03T03:04:36Z",
          "selfLink": "/api/v1beta1/services/kubernetes-ro?namespace=default",
          "resourceVersion": 12,
          "namespace": "default",
          "port": 80,
          "protocol": "TCP",
          "labels": {
            "component": "apiserver",
            "provider": "kubernetes"
          },
          "selector": null,
          "containerPort": 0,
          "portalIP": "10.244.182.142",
          "sessionAffinity": "None"
        }
      ]
    };

    // Uses promises
    return {
      loadAll : function() {
        // Simulate async call
        return $q.when(services);
      }
    };
  }
  ServiceDataService.$inject = ["$q"];

})();
